# linear_genotype.py

import random
import ast
from copy import deepcopy

class LinearGenotype():
    def __init__(self):
        self.fitness = None
        self.genes = None


    def random_initialization(self, shapes, bounds, **kwargs):
        # TODO: Initialize self.genes, using the input parameters.
        #       It should be an indexable data structure of length len(shapes),
        #       where each element is an indexable data structure of length 3.
        #       The first value of each element should be an integer within the
        #       half-open interval [bounds[0][0], bounds[0][1]). The second should be
        #       similar, within [bounds[1][0], bounds[1][1]). The third should be
        # either 0, 1, 2, or 3. All values should be chosen uniform randomly.
       
        self.genes = []
        for _ in range(len(shapes)):
            x = random.randint(bounds[0][0], bounds[0][1] - 1)
            y = random.randint(bounds[1][0], bounds[1][1] - 1)
            r = random.randint(0, 3)
        
            self.genes.append((x, y, r))
       
        


    def serialize(self):
        # TODO: Return a string representation of self.genes
         return str(self.genes)
        


    def deserialize(self, serialization):
        # TODO: Recreate self.genes from serialization,
        #       which is a string generated by your serialize method
        self.genes = ast.literal_eval(serialization)
        

    def recombine(self, mate, method, **kwargs):
        child = LinearGenotype()

        # TODO: Recombine genes of self with mate and
        #       assign to child's genes member variable
        assert method.casefold() in {'uniform', 'one-point', 'bonus'}
        if method.casefold() == 'uniform':
            # Perform uniform recombination
            child.genes = [
                random.choice([gene_self, gene_mate]) 
                for gene_self, gene_mate in zip(self.genes, mate.genes)
            ]
            

        elif method.casefold() == 'one-point':
            # Perform one-point crossover
            crossover_point = random.randint(1, len(self.genes) - 1)
            child.genes = self.genes[:crossover_point] + mate.genes[crossover_point:]

            pass

        elif method.casefold() == 'bonus':
            # This is a red deliverable (i.e., bonus for anyone).
            # Implement the bonus crossover operator as described
            # in deliverable Red 1 of Assignment 1b.
            pass

        return child


    def mutate(self, bounds, bonus=None, **kwargs):
        mutant = LinearGenotype()
        mutant.genes = deepcopy(self.genes)


        if not bonus:
 
            mutation_index = random.randint(0, len(mutant.genes) - 1)
            x = random.randint(bounds[0][0], bounds[0][1] - 1)
            y = random.randint(bounds[1][0], bounds[1][1] - 1)
            r = random.randint(0, 3)
            mutant.genes[mutation_index] = (x, y, r)

        else:

            for _ in range(3):
                mutation_index = random.randint(0, len(mutant.genes) - 1)
                x = random.randint(bounds[0][0], bounds[0][1] - 1)
                y = random.randint(bounds[1][0], bounds[1][1] - 1)
                r = random.randint(0, 3)
                mutant.genes[mutation_index] = (x, y, r)

        return mutant



    @classmethod
    def initialization(cls, mu, *args, **kwargs):
        population = [cls() for _ in range(mu)]
        for i in range(len(population)):
            population[i].random_initialization(*args, **kwargs)
        return population